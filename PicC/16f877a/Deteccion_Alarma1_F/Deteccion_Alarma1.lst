CCS PCM C Compiler, Version 5.008, 5967               29-jun-14 00:38

               Filename:   D:\IGNACIO\ProgramacionGitHub\SistemasEmbebidos2014-I\PicC\16f877a\Deteccion_Alarma1_PR\Deteccion_Alarma1.lst

               ROM used:   123 words (2%)
                           Largest free fragment is 2048
               RAM used:   14 (4%) at main() level
                           15 (4%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   069
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.4
0018:  GOTO   01B
0019:  BTFSC  0B.1
001A:  GOTO   030
001B:  BTFSS  0B.5
001C:  GOTO   01F
001D:  BTFSC  0B.2
001E:  GOTO   033
001F:  MOVF   22,W
0020:  MOVWF  04
0021:  MOVF   23,W
0022:  MOVWF  77
0023:  MOVF   24,W
0024:  MOVWF  78
0025:  MOVF   25,W
0026:  MOVWF  79
0027:  MOVF   26,W
0028:  MOVWF  7A
0029:  MOVF   20,W
002A:  MOVWF  0A
002B:  SWAPF  21,W
002C:  MOVWF  03
002D:  SWAPF  7F,F
002E:  SWAPF  7F,W
002F:  RETFIE
0030:  BCF    0A.3
0031:  BCF    0A.4
0032:  GOTO   036
0033:  BCF    0A.3
0034:  BCF    0A.4
0035:  GOTO   042
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP  
.................... #use delay(clock=10000000) 
....................  
.................... #use FAST_IO(B) 
.................... #use FAST_IO(D) 
....................  
.................... // ************************************** 
.................... // Declaracion de variables 
.................... int1 estado_alarma = 0; 
.................... unsigned int cont_tiempo = 0; 
.................... //*************************************** 
....................  
.................... // ************************************** 
.................... // Declaracion de Funciones 
.................... void Cargar_configuracion(); 
.................... void Configurar_interrupciones(); 
....................  
.................... // ************************************** 
....................  
.................... // ************************************** 
.................... // Declaracion de las Interrupciones 
.................... #INT_EXT       //Sentencias de la interrupcion RB0 
.................... void ext_isr(){ 
....................       if(estado_alarma == 0){ 
0036:  BTFSC  27.0
0037:  GOTO   03B
....................       estado_alarma = 1; 
0038:  BSF    27.0
....................       enable_interrupts(INT_TIMER0);       //Habilita interrupción timer0 
0039:  BSF    0B.5
....................       } 
003A:  GOTO   03E
....................       else { 
....................       estado_alarma = 0; 
003B:  BCF    27.0
....................       disable_interrupts(INT_TIMER0);       //Habilita interrupción timer0 
003C:  BCF    0B.5
....................       output_low(PIN_D0); 
003D:  BCF    08.0
....................       } 
....................    } 
003E:  BCF    0B.1
003F:  BCF    0A.3
0040:  BCF    0A.4
0041:  GOTO   01F
.................... #int_TIMER0 
.................... void TIMER0_isr(void) { 
....................    set_timer0 (0x1B); 
0042:  MOVLW  1B
0043:  MOVWF  01
....................    cont_tiempo++; 
0044:  INCF   28,F
....................    if (cont_tiempo == 255){ 
0045:  INCFSZ 28,W
0046:  GOTO   04A
....................    output_toggle(PIN_D0); 
0047:  MOVLW  01
0048:  XORWF  08,F
....................    cont_tiempo = 0; 
0049:  CLRF   28
....................    } 
004A:  BCF    0B.2
004B:  BCF    0A.3
004C:  BCF    0A.4
004D:  GOTO   01F
....................    }               //Se recarga el timer0 
.................... // ************************************************** 
....................  
.................... // FUNCION PRINCIPAL 
.................... void main() 
*
0069:  MOVF   03,W
006A:  ANDLW  1F
006B:  MOVWF  03
006C:  BCF    27.0
006D:  CLRF   28
006E:  BSF    03.5
006F:  BSF    1F.0
0070:  BSF    1F.1
0071:  BSF    1F.2
0072:  BCF    1F.3
0073:  MOVLW  07
0074:  MOVWF  1C
0075:  BCF    03.7
.................... {   
....................    Cargar_configuracion(); 
0076:  BCF    03.5
0077:  GOTO   04E
....................    Configurar_interrupciones(); 
0078:  GOTO   059
....................        
....................    while(true) 
....................    {   
0079:  GOTO   079
....................    } 
.................... } 
....................  
007A:  SLEEP
.................... // **************************************** 
.................... // Definicion de las Funciones 
....................  
.................... void Cargar_configuracion(){ 
....................    SET_TRIS_B(0xFF);    //configura PORTB entrada / 0=salida / 1=entrada 
*
004E:  MOVLW  FF
004F:  BSF    03.5
0050:  MOVWF  06
....................    SET_TRIS_D(0x00);    //configura PORTD salida 
0051:  MOVLW  00
0052:  MOVWF  08
....................    OUTPUT_D(0x00);   //inicializando PORTD en 0x00 
0053:  BCF    03.5
0054:  CLRF   08
....................    estado_alarma = 0; 
0055:  BCF    27.0
0056:  BCF    0A.3
0057:  BCF    0A.4
0058:  GOTO   078 (RETURN)
.................... } 
....................  
.................... void Configurar_interrupciones(){ 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_2);   //Configuración timer0 
0059:  BSF    03.5
005A:  MOVF   01,W
005B:  ANDLW  C0
005C:  MOVWF  01
....................    set_timer0 (0x1B);                    //Carga del timer0 
005D:  MOVLW  1B
005E:  BCF    03.5
005F:  MOVWF  01
....................    ext_int_edge(L_TO_H);         // Flag INTF si flanco de bajada / H_TO_L bajada 
0060:  BSF    03.5
0061:  BSF    01.6
....................    enable_interrupts(INT_EXT);   // habilitar interrupcion del RB0 /INTE 
0062:  BCF    03.5
0063:  BSF    0B.4
....................    enable_interrupts(GLOBAL); 
0064:  MOVLW  C0
0065:  IORWF  0B,F
0066:  BCF    0A.3
0067:  BCF    0A.4
0068:  GOTO   079 (RETURN)
.................... } 
.................... //********************************************************************** 

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

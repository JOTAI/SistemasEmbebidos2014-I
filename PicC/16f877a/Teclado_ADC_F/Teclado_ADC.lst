CCS PCM C Compiler, Version 5.008, 5967               19-jun-14 11:45

               Filename:   D:\IGNACIO\Programacion\Microcontroladores\PicC\16f877a\Teclado_ADC_PR\Teclado_ADC.lst

               ROM used:   1438 words (18%)
                           Largest free fragment is 2048
               RAM used:   18 (5%) at main() level
                           45 (12%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  05
0001:  MOVWF  0A
0002:  GOTO   52E
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  BCF    0A.0
000D:  BCF    0A.1
000E:  BCF    0A.2
000F:  ADDWF  02,F
0010:  RETLW  D7
0011:  RETLW  EE
0012:  RETLW  DE
0013:  RETLW  BE
0014:  RETLW  ED
0015:  RETLW  DD
0016:  RETLW  BD
0017:  RETLW  EB
0018:  RETLW  DB
0019:  RETLW  BB
001A:  RETLW  E7
001B:  RETLW  B7
001C:  RETLW  77
001D:  RETLW  7B
001E:  RETLW  7D
001F:  RETLW  7E
0020:  RETLW  80
0021:  BCF    0A.0
0022:  BCF    0A.1
0023:  BCF    0A.2
0024:  ADDWF  02,F
0025:  RETLW  30
0026:  RETLW  31
0027:  RETLW  32
0028:  RETLW  33
0029:  RETLW  34
002A:  RETLW  35
002B:  RETLW  36
002C:  RETLW  37
002D:  RETLW  38
002E:  RETLW  39
002F:  RETLW  2A
0030:  RETLW  23
0031:  RETLW  44
0032:  RETLW  43
0033:  RETLW  42
0034:  RETLW  41
0035:  DATA 0C,00
0036:  DATA D4,32
0037:  DATA 63,36
0038:  DATA 61,10
0039:  DATA 69,37
003A:  DATA F6,30
003B:  DATA EC,34
003C:  DATA E4,30
003D:  DATA 00,00
003E:  DATA 0A,00
*
0119:  MOVLW  8E
011A:  MOVWF  77
011B:  MOVF   2F,W
011C:  MOVWF  78
011D:  MOVF   2E,W
011E:  MOVWF  79
011F:  CLRF   7A
0120:  MOVF   78,F
0121:  BTFSS  03.2
0122:  GOTO   12D
0123:  MOVF   79,W
0124:  MOVWF  78
0125:  CLRF   79
0126:  MOVLW  08
0127:  SUBWF  77,F
0128:  MOVF   78,F
0129:  BTFSS  03.2
012A:  GOTO   12D
012B:  CLRF   77
012C:  GOTO   135
012D:  BCF    03.0
012E:  BTFSC  78.7
012F:  GOTO   134
0130:  RLF    79,F
0131:  RLF    78,F
0132:  DECF   77,F
0133:  GOTO   12D
0134:  BCF    78.7
0135:  RETURN
0136:  MOVF   2E,W
0137:  MOVWF  35
0138:  MOVF   32,W
0139:  XORWF  35,F
013A:  BTFSS  35.7
013B:  GOTO   141
013C:  BCF    03.2
013D:  BCF    03.0
013E:  BTFSC  2E.7
013F:  BSF    03.0
0140:  GOTO   174
0141:  MOVF   2E,W
0142:  MOVWF  35
0143:  MOVF   31,W
0144:  MOVWF  36
0145:  MOVF   2D,W
0146:  SUBWF  36,F
0147:  BTFSC  03.2
0148:  GOTO   14F
0149:  BTFSS  35.7
014A:  GOTO   174
014B:  MOVF   03,W
014C:  XORLW  01
014D:  MOVWF  03
014E:  GOTO   174
014F:  MOVF   32,W
0150:  MOVWF  36
0151:  MOVF   2E,W
0152:  SUBWF  36,F
0153:  BTFSC  03.2
0154:  GOTO   15B
0155:  BTFSS  35.7
0156:  GOTO   174
0157:  MOVF   03,W
0158:  XORLW  01
0159:  MOVWF  03
015A:  GOTO   174
015B:  MOVF   33,W
015C:  MOVWF  36
015D:  MOVF   2F,W
015E:  SUBWF  36,F
015F:  BTFSC  03.2
0160:  GOTO   167
0161:  BTFSS  35.7
0162:  GOTO   174
0163:  MOVF   03,W
0164:  XORLW  01
0165:  MOVWF  03
0166:  GOTO   174
0167:  MOVF   34,W
0168:  MOVWF  36
0169:  MOVF   30,W
016A:  SUBWF  36,F
016B:  BTFSC  03.2
016C:  GOTO   173
016D:  BTFSS  35.7
016E:  GOTO   174
016F:  MOVF   03,W
0170:  XORLW  01
0171:  MOVWF  03
0172:  GOTO   174
0173:  BCF    03.0
0174:  RETURN
*
01A9:  MOVF   0B,W
01AA:  MOVWF  2E
01AB:  BCF    0B.7
01AC:  BSF    03.5
01AD:  BSF    03.6
01AE:  BSF    0C.7
01AF:  BSF    0C.0
01B0:  NOP
01B1:  NOP
01B2:  BCF    03.5
01B3:  MOVF   0C,W
01B4:  ANDLW  7F
01B5:  BTFSC  03.2
01B6:  GOTO   1F0
01B7:  BCF    03.6
01B8:  MOVWF  2F
01B9:  BSF    03.6
01BA:  MOVF   0D,W
01BB:  BCF    03.6
01BC:  MOVWF  30
01BD:  BSF    03.6
01BE:  MOVF   0F,W
01BF:  BCF    03.6
01C0:  MOVWF  31
01C1:  MOVF   2F,W
01C2:  MOVWF  3B
01C3:  CALL   175
01C4:  MOVF   30,W
01C5:  BSF    03.6
01C6:  MOVWF  0D
01C7:  BCF    03.6
01C8:  MOVF   31,W
01C9:  BSF    03.6
01CA:  MOVWF  0F
01CB:  BSF    03.5
01CC:  BSF    0C.7
01CD:  BSF    0C.0
01CE:  NOP
01CF:  NOP
01D0:  BCF    03.5
01D1:  RLF    0C,W
01D2:  RLF    0E,W
01D3:  ANDLW  7F
01D4:  BTFSC  03.2
01D5:  GOTO   1F0
01D6:  BCF    03.6
01D7:  MOVWF  2F
01D8:  BSF    03.6
01D9:  MOVF   0D,W
01DA:  BCF    03.6
01DB:  MOVWF  30
01DC:  BSF    03.6
01DD:  MOVF   0F,W
01DE:  BCF    03.6
01DF:  MOVWF  31
01E0:  MOVF   2F,W
01E1:  MOVWF  3B
01E2:  CALL   175
01E3:  MOVF   30,W
01E4:  BSF    03.6
01E5:  MOVWF  0D
01E6:  BCF    03.6
01E7:  MOVF   31,W
01E8:  BSF    03.6
01E9:  MOVWF  0F
01EA:  INCF   0D,F
01EB:  BTFSC  03.2
01EC:  INCF   0F,F
01ED:  BCF    03.6
01EE:  GOTO   1AC
01EF:  BSF    03.6
01F0:  BCF    03.6
01F1:  BTFSC  2E.7
01F2:  BSF    0B.7
01F3:  RETURN
01F4:  MOVF   35,W
01F5:  CLRF   78
01F6:  SUBWF  34,W
01F7:  BTFSC  03.0
01F8:  GOTO   1FC
01F9:  MOVF   34,W
01FA:  MOVWF  77
01FB:  GOTO   208
01FC:  CLRF   77
01FD:  MOVLW  08
01FE:  MOVWF  36
01FF:  RLF    34,F
0200:  RLF    77,F
0201:  MOVF   35,W
0202:  SUBWF  77,W
0203:  BTFSC  03.0
0204:  MOVWF  77
0205:  RLF    78,F
0206:  DECFSZ 36,F
0207:  GOTO   1FF
0208:  RETURN
0209:  MOVLW  20
020A:  BTFSS  2F.4
020B:  MOVLW  30
020C:  MOVWF  30
020D:  MOVF   2E,W
020E:  MOVWF  77
020F:  BTFSS  2E.7
0210:  GOTO   219
0211:  COMF   77,F
0212:  INCF   77,F
0213:  MOVF   77,W
0214:  MOVWF  2E
0215:  MOVLW  2D
0216:  MOVWF  30
0217:  BSF    2F.7
0218:  BSF    2F.0
0219:  MOVF   2E,W
021A:  MOVWF  34
021B:  MOVLW  64
021C:  MOVWF  35
021D:  CALL   1F4
021E:  MOVF   77,W
021F:  MOVWF  2E
0220:  MOVLW  30
0221:  ADDWF  78,W
0222:  MOVWF  31
0223:  MOVF   2E,W
0224:  MOVWF  34
0225:  MOVLW  0A
0226:  MOVWF  35
0227:  CALL   1F4
0228:  MOVLW  30
0229:  ADDWF  77,W
022A:  MOVWF  33
022B:  MOVLW  30
022C:  ADDWF  78,W
022D:  MOVWF  32
022E:  MOVF   30,W
022F:  MOVWF  77
0230:  MOVLW  30
0231:  SUBWF  31,W
0232:  BTFSC  03.2
0233:  GOTO   238
0234:  BSF    2F.1
0235:  BTFSC  2F.7
0236:  BSF    2F.2
0237:  GOTO   24C
0238:  MOVF   30,W
0239:  MOVWF  31
023A:  MOVLW  20
023B:  MOVWF  30
023C:  MOVLW  30
023D:  SUBWF  32,W
023E:  BTFSC  03.2
023F:  GOTO   244
0240:  BSF    2F.0
0241:  BTFSC  2F.7
0242:  BSF    2F.1
0243:  GOTO   24C
0244:  BTFSS  03.2
0245:  BSF    2F.0
0246:  BTFSS  03.2
0247:  GOTO   24C
0248:  MOVF   31,W
0249:  MOVWF  32
024A:  MOVLW  20
024B:  MOVWF  31
024C:  BTFSC  2F.2
024D:  GOTO   253
024E:  BTFSC  2F.1
024F:  GOTO   256
0250:  BTFSC  2F.0
0251:  GOTO   259
0252:  GOTO   25C
0253:  MOVF   30,W
0254:  MOVWF  3B
0255:  CALL   175
0256:  MOVF   31,W
0257:  MOVWF  3B
0258:  CALL   175
0259:  MOVF   32,W
025A:  MOVWF  3B
025B:  CALL   175
025C:  MOVF   33,W
025D:  MOVWF  3B
025E:  CALL   175
025F:  RETURN
0260:  BTFSC  03.1
0261:  GOTO   265
0262:  MOVLW  43
0263:  MOVWF  04
0264:  BCF    03.7
0265:  CLRF   77
0266:  CLRF   78
0267:  CLRF   79
0268:  CLRF   7A
0269:  CLRF   43
026A:  CLRF   44
026B:  CLRF   45
026C:  CLRF   46
026D:  MOVF   42,W
026E:  IORWF  41,W
026F:  IORWF  40,W
0270:  IORWF  3F,W
0271:  BTFSC  03.2
0272:  GOTO   2A3
0273:  MOVLW  20
0274:  MOVWF  47
0275:  BCF    03.0
0276:  RLF    3B,F
0277:  RLF    3C,F
0278:  RLF    3D,F
0279:  RLF    3E,F
027A:  RLF    43,F
027B:  RLF    44,F
027C:  RLF    45,F
027D:  RLF    46,F
027E:  MOVF   42,W
027F:  SUBWF  46,W
0280:  BTFSS  03.2
0281:  GOTO   28C
0282:  MOVF   41,W
0283:  SUBWF  45,W
0284:  BTFSS  03.2
0285:  GOTO   28C
0286:  MOVF   40,W
0287:  SUBWF  44,W
0288:  BTFSS  03.2
0289:  GOTO   28C
028A:  MOVF   3F,W
028B:  SUBWF  43,W
028C:  BTFSS  03.0
028D:  GOTO   29D
028E:  MOVF   3F,W
028F:  SUBWF  43,F
0290:  MOVF   40,W
0291:  BTFSS  03.0
0292:  INCFSZ 40,W
0293:  SUBWF  44,F
0294:  MOVF   41,W
0295:  BTFSS  03.0
0296:  INCFSZ 41,W
0297:  SUBWF  45,F
0298:  MOVF   42,W
0299:  BTFSS  03.0
029A:  INCFSZ 42,W
029B:  SUBWF  46,F
029C:  BSF    03.0
029D:  RLF    77,F
029E:  RLF    78,F
029F:  RLF    79,F
02A0:  RLF    7A,F
02A1:  DECFSZ 47,F
02A2:  GOTO   275
02A3:  MOVF   43,W
02A4:  MOVWF  00
02A5:  INCF   04,F
02A6:  MOVF   44,W
02A7:  MOVWF  00
02A8:  INCF   04,F
02A9:  MOVF   45,W
02AA:  MOVWF  00
02AB:  INCF   04,F
02AC:  MOVF   46,W
02AD:  MOVWF  00
02AE:  RETURN
02AF:  MOVF   04,W
02B0:  MOVWF  33
02B1:  MOVF   32,W
02B2:  MOVWF  35
02B3:  BTFSC  03.2
02B4:  GOTO   341
02B5:  MOVF   31,W
02B6:  MOVWF  3E
02B7:  MOVF   30,W
02B8:  MOVWF  3D
02B9:  MOVF   2F,W
02BA:  MOVWF  3C
02BB:  MOVF   2E,W
02BC:  MOVWF  3B
02BD:  CLRF   42
02BE:  CLRF   41
02BF:  MOVLW  20
02C0:  MOVWF  40
02C1:  MOVLW  82
02C2:  MOVWF  3F
02C3:  MOVF   3B,W
02C4:  BTFSC  03.2
02C5:  GOTO   333
02C6:  MOVWF  43
02C7:  MOVF   3F,W
02C8:  BTFSC  03.2
02C9:  GOTO   333
02CA:  ADDWF  43,F
02CB:  BTFSC  03.0
02CC:  GOTO   2D4
02CD:  MOVLW  7F
02CE:  SUBWF  43,F
02CF:  BTFSS  03.0
02D0:  GOTO   333
02D1:  BTFSC  03.2
02D2:  GOTO   333
02D3:  GOTO   2D8
02D4:  MOVLW  81
02D5:  ADDWF  43,F
02D6:  BTFSC  03.0
02D7:  GOTO   333
02D8:  MOVF   43,W
02D9:  MOVWF  77
02DA:  CLRF   78
02DB:  CLRF   79
02DC:  CLRF   7A
02DD:  MOVF   3C,W
02DE:  MOVWF  47
02DF:  BSF    47.7
02E0:  MOVF   3D,W
02E1:  MOVWF  46
02E2:  MOVF   3E,W
02E3:  MOVWF  45
02E4:  MOVLW  18
02E5:  MOVWF  43
02E6:  CLRF   44
02E7:  BTFSS  45.0
02E8:  GOTO   301
02E9:  MOVF   42,W
02EA:  ADDWF  7A,F
02EB:  BTFSS  03.0
02EC:  GOTO   2F3
02ED:  INCF   79,F
02EE:  BTFSS  03.2
02EF:  GOTO   2F3
02F0:  INCF   78,F
02F1:  BTFSC  03.2
02F2:  BSF    44.7
02F3:  MOVF   41,W
02F4:  ADDWF  79,F
02F5:  BTFSS  03.0
02F6:  GOTO   2FA
02F7:  INCF   78,F
02F8:  BTFSC  03.2
02F9:  BSF    44.7
02FA:  MOVF   40,W
02FB:  MOVWF  3D
02FC:  BSF    3D.7
02FD:  MOVF   3D,W
02FE:  ADDWF  78,F
02FF:  BTFSC  03.0
0300:  BSF    44.7
0301:  RLF    44,F
0302:  RRF    78,F
0303:  RRF    79,F
0304:  RRF    7A,F
0305:  RRF    47,F
0306:  RRF    46,F
0307:  RRF    45,F
0308:  BCF    03.0
0309:  DECFSZ 43,F
030A:  GOTO   2E6
030B:  MOVLW  01
030C:  ADDWF  77,F
030D:  BTFSC  03.0
030E:  GOTO   333
030F:  BTFSC  78.7
0310:  GOTO   318
0311:  RLF    47,F
0312:  RLF    7A,F
0313:  RLF    79,F
0314:  RLF    78,F
0315:  DECF   77,F
0316:  BTFSC  03.2
0317:  GOTO   333
0318:  BTFSS  47.7
0319:  GOTO   329
031A:  INCF   7A,F
031B:  BTFSS  03.2
031C:  GOTO   329
031D:  INCF   79,F
031E:  BTFSS  03.2
031F:  GOTO   329
0320:  INCF   78,F
0321:  BTFSS  03.2
0322:  GOTO   329
0323:  RRF    78,F
0324:  RRF    79,F
0325:  RRF    7A,F
0326:  INCF   77,F
0327:  BTFSC  03.2
0328:  GOTO   333
0329:  MOVF   3C,W
032A:  MOVWF  44
032B:  MOVF   40,W
032C:  XORWF  44,F
032D:  BTFSS  44.7
032E:  GOTO   331
032F:  BSF    78.7
0330:  GOTO   337
0331:  BCF    78.7
0332:  GOTO   337
0333:  CLRF   77
0334:  CLRF   78
0335:  CLRF   79
0336:  CLRF   7A
0337:  MOVF   7A,W
0338:  MOVWF  31
0339:  MOVF   79,W
033A:  MOVWF  30
033B:  MOVF   78,W
033C:  MOVWF  2F
033D:  MOVF   77,W
033E:  MOVWF  2E
033F:  DECFSZ 35,F
0340:  GOTO   2B5
0341:  MOVF   31,W
0342:  MOVWF  3E
0343:  MOVF   30,W
0344:  MOVWF  3D
0345:  MOVF   2F,W
0346:  MOVWF  3C
0347:  MOVF   2E,W
0348:  MOVWF  3B
0349:  MOVF   3B,W
034A:  SUBLW  B6
034B:  MOVWF  3B
034C:  CLRF   7A
034D:  MOVF   3C,W
034E:  MOVWF  3F
034F:  BSF    3C.7
0350:  BCF    03.0
0351:  RRF    3C,F
0352:  RRF    3D,F
0353:  RRF    3E,F
0354:  RRF    7A,F
0355:  RRF    79,F
0356:  RRF    78,F
0357:  RRF    77,F
0358:  DECFSZ 3B,F
0359:  GOTO   350
035A:  BTFSS  3F.7
035B:  GOTO   367
035C:  COMF   77,F
035D:  COMF   78,F
035E:  COMF   79,F
035F:  COMF   7A,F
0360:  INCF   77,F
0361:  BTFSC  03.2
0362:  INCF   78,F
0363:  BTFSC  03.2
0364:  INCF   79,F
0365:  BTFSC  03.2
0366:  INCF   7A,F
0367:  MOVF   7A,W
0368:  MOVWF  31
0369:  MOVF   79,W
036A:  MOVWF  30
036B:  MOVF   78,W
036C:  MOVWF  2F
036D:  MOVF   77,W
036E:  MOVWF  2E
036F:  BTFSS  31.7
0370:  GOTO   37E
0371:  DECF   33,F
0372:  BSF    33.5
0373:  COMF   2E,F
0374:  COMF   2F,F
0375:  COMF   30,F
0376:  COMF   31,F
0377:  INCF   2E,F
0378:  BTFSC  03.2
0379:  INCF   2F,F
037A:  BTFSC  03.2
037B:  INCF   30,F
037C:  BTFSC  03.2
037D:  INCF   31,F
037E:  MOVLW  3B
037F:  MOVWF  3A
0380:  MOVLW  9A
0381:  MOVWF  39
0382:  MOVLW  CA
0383:  MOVWF  38
0384:  CLRF   37
0385:  MOVLW  0A
0386:  MOVWF  35
0387:  MOVF   32,W
0388:  BTFSC  03.2
0389:  INCF   33,F
038A:  BSF    03.1
038B:  MOVLW  2E
038C:  MOVWF  04
038D:  BCF    03.7
038E:  MOVF   31,W
038F:  MOVWF  3E
0390:  MOVF   30,W
0391:  MOVWF  3D
0392:  MOVF   2F,W
0393:  MOVWF  3C
0394:  MOVF   2E,W
0395:  MOVWF  3B
0396:  MOVF   3A,W
0397:  MOVWF  42
0398:  MOVF   39,W
0399:  MOVWF  41
039A:  MOVF   38,W
039B:  MOVWF  40
039C:  MOVF   37,W
039D:  MOVWF  3F
039E:  CALL   260
039F:  MOVF   78,W
03A0:  MOVF   77,F
03A1:  BTFSS  03.2
03A2:  GOTO   3B6
03A3:  INCF   32,W
03A4:  SUBWF  35,W
03A5:  BTFSC  03.2
03A6:  GOTO   3B6
03A7:  MOVF   33,W
03A8:  BTFSC  03.2
03A9:  GOTO   3B8
03AA:  ANDLW  0F
03AB:  SUBWF  35,W
03AC:  BTFSC  03.2
03AD:  GOTO   3B0
03AE:  BTFSC  03.0
03AF:  GOTO   3E8
03B0:  BTFSC  33.7
03B1:  GOTO   3E8
03B2:  BTFSC  33.6
03B3:  GOTO   3B8
03B4:  MOVLW  20
03B5:  GOTO   3E4
03B6:  MOVLW  20
03B7:  ANDWF  33,F
03B8:  BTFSS  33.5
03B9:  GOTO   3C6
03BA:  BCF    33.5
03BB:  MOVF   32,W
03BC:  BTFSS  03.2
03BD:  DECF   33,F
03BE:  MOVF   77,W
03BF:  MOVWF  33
03C0:  MOVLW  2D
03C1:  MOVWF  3B
03C2:  CALL   175
03C3:  MOVF   33,W
03C4:  MOVWF  77
03C5:  CLRF   33
03C6:  MOVF   32,W
03C7:  SUBWF  35,W
03C8:  BTFSS  03.2
03C9:  GOTO   3D4
03CA:  MOVF   77,W
03CB:  MOVWF  33
03CC:  MOVLW  2E
03CD:  MOVWF  3B
03CE:  CALL   175
03CF:  MOVF   33,W
03D0:  MOVWF  77
03D1:  MOVLW  20
03D2:  ANDWF  33,F
03D3:  MOVLW  00
03D4:  MOVLW  30
03D5:  BTFSS  33.5
03D6:  GOTO   3E4
03D7:  BCF    33.5
03D8:  MOVF   32,W
03D9:  BTFSS  03.2
03DA:  DECF   33,F
03DB:  MOVF   77,W
03DC:  MOVWF  33
03DD:  MOVLW  2D
03DE:  MOVWF  3B
03DF:  CALL   175
03E0:  MOVF   33,W
03E1:  MOVWF  77
03E2:  CLRF   33
03E3:  MOVLW  30
03E4:  ADDWF  77,F
03E5:  MOVF   77,W
03E6:  MOVWF  3B
03E7:  CALL   175
03E8:  BCF    03.1
03E9:  MOVF   3A,W
03EA:  MOVWF  3E
03EB:  MOVF   39,W
03EC:  MOVWF  3D
03ED:  MOVF   38,W
03EE:  MOVWF  3C
03EF:  MOVF   37,W
03F0:  MOVWF  3B
03F1:  CLRF   42
03F2:  CLRF   41
03F3:  CLRF   40
03F4:  MOVLW  0A
03F5:  MOVWF  3F
03F6:  CALL   260
03F7:  MOVF   7A,W
03F8:  MOVWF  3A
03F9:  MOVF   79,W
03FA:  MOVWF  39
03FB:  MOVF   78,W
03FC:  MOVWF  38
03FD:  MOVF   77,W
03FE:  MOVWF  37
03FF:  DECFSZ 35,F
0400:  GOTO   38A
0401:  BCF    0A.3
0402:  BCF    0A.4
0403:  GOTO   52D (RETURN)
*
042D:  MOVLW  10
042E:  MOVWF  32
042F:  CLRF   77
0430:  CLRF   7A
0431:  RRF    2F,F
0432:  RRF    2E,F
0433:  BTFSS  03.0
0434:  GOTO   43B
0435:  MOVF   30,W
0436:  ADDWF  77,F
0437:  BTFSC  03.0
0438:  INCF   7A,F
0439:  MOVF   31,W
043A:  ADDWF  7A,F
043B:  RRF    7A,F
043C:  RRF    77,F
043D:  RRF    79,F
043E:  RRF    78,F
043F:  DECFSZ 32,F
0440:  GOTO   431
*
044D:  CLRF   78
044E:  CLRF   79
044F:  CLRF   77
0450:  CLRF   7A
0451:  MOVF   33,W
0452:  BTFSS  03.2
0453:  GOTO   457
0454:  MOVF   32,W
0455:  BTFSC  03.2
0456:  GOTO   471
0457:  MOVLW  10
0458:  MOVWF  34
0459:  BCF    03.0
045A:  RLF    30,F
045B:  RLF    31,F
045C:  RLF    77,F
045D:  RLF    7A,F
045E:  MOVF   33,W
045F:  SUBWF  7A,W
0460:  BTFSS  03.2
0461:  GOTO   464
0462:  MOVF   32,W
0463:  SUBWF  77,W
0464:  BTFSS  03.0
0465:  GOTO   46D
0466:  MOVF   32,W
0467:  SUBWF  77,F
0468:  BTFSS  03.0
0469:  DECF   7A,F
046A:  MOVF   33,W
046B:  SUBWF  7A,F
046C:  BSF    03.0
046D:  RLF    78,F
046E:  RLF    79,F
046F:  DECFSZ 34,F
0470:  GOTO   459
*
04A0:  CLRF   36
04A1:  MOVF   04,W
04A2:  MOVWF  35
04A3:  BCF    36.0
04A4:  BTFSC  03.7
04A5:  BSF    36.0
04A6:  SWAPF  2F,W
04A7:  IORLW  F0
04A8:  MOVWF  31
04A9:  ADDWF  31,F
04AA:  ADDLW  E2
04AB:  MOVWF  32
04AC:  ADDLW  32
04AD:  MOVWF  34
04AE:  MOVF   2F,W
04AF:  ANDLW  0F
04B0:  ADDWF  32,F
04B1:  ADDWF  32,F
04B2:  ADDWF  34,F
04B3:  ADDLW  E9
04B4:  MOVWF  33
04B5:  ADDWF  33,F
04B6:  ADDWF  33,F
04B7:  SWAPF  2E,W
04B8:  ANDLW  0F
04B9:  ADDWF  33,F
04BA:  ADDWF  34,F
04BB:  RLF    33,F
04BC:  RLF    34,F
04BD:  COMF   34,F
04BE:  RLF    34,F
04BF:  MOVF   2E,W
04C0:  ANDLW  0F
04C1:  ADDWF  34,F
04C2:  RLF    31,F
04C3:  MOVLW  07
04C4:  MOVWF  30
04C5:  MOVLW  0A
04C6:  ADDWF  34,F
04C7:  DECF   33,F
04C8:  BTFSS  03.0
04C9:  GOTO   4C6
04CA:  ADDWF  33,F
04CB:  DECF   32,F
04CC:  BTFSS  03.0
04CD:  GOTO   4CA
04CE:  ADDWF  32,F
04CF:  DECF   31,F
04D0:  BTFSS  03.0
04D1:  GOTO   4CE
04D2:  ADDWF  31,F
04D3:  DECF   30,F
04D4:  BTFSS  03.0
04D5:  GOTO   4D2
04D6:  MOVLW  30
04D7:  MOVWF  04
04D8:  BCF    03.7
04D9:  MOVLW  07
04DA:  ANDWF  35,W
04DB:  BCF    35.6
04DC:  ADDWF  04,F
04DD:  MOVLW  34
04DE:  SUBWF  04,W
04DF:  BTFSC  03.2
04E0:  BSF    35.6
04E1:  MOVF   00,W
04E2:  MOVWF  77
04E3:  BTFSS  03.2
04E4:  GOTO   4ED
04E5:  BTFSC  35.6
04E6:  GOTO   4ED
04E7:  BTFSC  35.4
04E8:  GOTO   4FF
04E9:  BTFSC  35.3
04EA:  GOTO   4ED
04EB:  MOVLW  20
04EC:  GOTO   4F0
04ED:  BSF    35.3
04EE:  BCF    35.4
04EF:  MOVLW  30
04F0:  ADDWF  77,F
04F1:  CLRF   2F
04F2:  MOVF   04,W
04F3:  MOVWF  2E
04F4:  BCF    2F.0
04F5:  BTFSC  03.7
04F6:  BSF    2F.0
04F7:  MOVF   77,W
04F8:  MOVWF  3B
04F9:  CALL   175
04FA:  MOVF   2E,W
04FB:  MOVWF  04
04FC:  BCF    03.7
04FD:  BTFSC  2F.0
04FE:  BSF    03.7
04FF:  INCF   04,F
0500:  BTFSS  35.6
0501:  GOTO   4DD
....................  
.................... #list 
....................  
.................... #FUSES HS,NOWDT,NOPROTECT,NOLVP 
.................... #DEVICE ADC=10                // Resolucion del ADC 10bits 
....................  
.................... #USE delay(clock=20000000) 
*
003F:  MOVLW  3C
0040:  MOVWF  04
0041:  BCF    03.7
0042:  MOVF   00,W
0043:  BTFSC  03.2
0044:  GOTO   052
0045:  MOVLW  06
0046:  MOVWF  78
0047:  CLRF   77
0048:  DECFSZ 77,F
0049:  GOTO   048
004A:  DECFSZ 78,F
004B:  GOTO   047
004C:  MOVLW  7B
004D:  MOVWF  77
004E:  DECFSZ 77,F
004F:  GOTO   04E
0050:  DECFSZ 00,F
0051:  GOTO   045
0052:  RETURN
....................  
....................  
.................... #BYTE   tecla_port=0x06 
.................... #BIT   rbif=0x0B.0 
.................... #BIT   rbpu=0x81.7 
.................... #INCLUDE "LCD.C" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
0065:  MOVLW  F0
0066:  BSF    03.5
0067:  MOVWF  08
....................       lcd.rw = 1; 
0068:  BCF    03.5
0069:  BSF    08.2
....................       delay_cycles(1); 
006A:  NOP
....................       lcd.enable = 1; 
006B:  BSF    08.0
....................       delay_cycles(1); 
006C:  NOP
....................       high = lcd.data; 
006D:  MOVF   08,W
006E:  SWAPF  08,W
006F:  ANDLW  0F
0070:  MOVWF  43
....................       lcd.enable = 0; 
0071:  BCF    08.0
....................       delay_cycles(1); 
0072:  NOP
....................       lcd.enable = 1; 
0073:  BSF    08.0
....................       delay_us(1); 
0074:  GOTO   075
0075:  GOTO   076
0076:  NOP
....................       low = lcd.data; 
0077:  MOVF   08,W
0078:  SWAPF  08,W
0079:  ANDLW  0F
007A:  MOVWF  42
....................       lcd.enable = 0; 
007B:  BCF    08.0
....................       set_tris_lcd(LCD_WRITE); 
007C:  MOVLW  00
007D:  BSF    03.5
007E:  MOVWF  08
....................       return( (high<<4) | low); 
007F:  BCF    03.5
0080:  SWAPF  43,W
0081:  MOVWF  77
0082:  MOVLW  F0
0083:  ANDWF  77,F
0084:  MOVF   77,W
0085:  IORWF  42,W
0086:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0053:  SWAPF  43,W
0054:  ANDLW  F0
0055:  MOVWF  77
0056:  MOVLW  0F
0057:  ANDWF  08,W
0058:  IORWF  77,W
0059:  MOVWF  08
....................       delay_cycles(1); 
005A:  NOP
....................       lcd.enable = 1; 
005B:  BSF    08.0
....................       delay_us(2); 
005C:  MOVLW  02
005D:  MOVWF  77
005E:  DECFSZ 77,F
005F:  GOTO   05E
0060:  GOTO   061
0061:  NOP
....................       lcd.enable = 0; 
0062:  BCF    08.0
0063:  RETURN
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0064:  BCF    08.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
0087:  MOVF   78,W
0088:  MOVWF  42
0089:  BTFSC  42.7
008A:  GOTO   065
....................       lcd.rs = address; 
008B:  BTFSS  40.0
008C:  BCF    08.1
008D:  BTFSC  40.0
008E:  BSF    08.1
....................       delay_cycles(1); 
008F:  NOP
....................       lcd.rw = 0; 
0090:  BCF    08.2
....................       delay_cycles(1); 
0091:  NOP
....................       lcd.enable = 0; 
0092:  BCF    08.0
....................       lcd_send_nibble(n >> 4); 
0093:  SWAPF  41,W
0094:  MOVWF  42
0095:  MOVLW  0F
0096:  ANDWF  42,F
0097:  MOVF   42,W
0098:  MOVWF  43
0099:  CALL   053
....................       lcd_send_nibble(n & 0xf); 
009A:  MOVF   41,W
009B:  ANDLW  0F
009C:  MOVWF  42
009D:  MOVWF  43
009E:  CALL   053
009F:  RETURN
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
00A0:  MOVLW  00
00A1:  BSF    03.5
00A2:  MOVWF  08
....................     lcd.rs = 0; 
00A3:  BCF    03.5
00A4:  BCF    08.1
....................     lcd.rw = 0; 
00A5:  BCF    08.2
....................     lcd.enable = 0; 
00A6:  BCF    08.0
....................     delay_ms(15); 
00A7:  MOVLW  0F
00A8:  MOVWF  3C
00A9:  CALL   03F
....................     for(i=1;i<=3;++i) { 
00AA:  MOVLW  01
00AB:  MOVWF  2D
00AC:  MOVF   2D,W
00AD:  SUBLW  03
00AE:  BTFSS  03.0
00AF:  GOTO   0B8
....................        lcd_send_nibble(3); 
00B0:  MOVLW  03
00B1:  MOVWF  43
00B2:  CALL   053
....................        delay_ms(5); 
00B3:  MOVLW  05
00B4:  MOVWF  3C
00B5:  CALL   03F
00B6:  INCF   2D,F
00B7:  GOTO   0AC
....................     } 
....................     lcd_send_nibble(2); 
00B8:  MOVLW  02
00B9:  MOVWF  43
00BA:  CALL   053
....................     for(i=0;i<=3;++i) 
00BB:  CLRF   2D
00BC:  MOVF   2D,W
00BD:  SUBLW  03
00BE:  BTFSS  03.0
00BF:  GOTO   0C9
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
00C0:  MOVF   2D,W
00C1:  CALL   004
00C2:  MOVWF  2E
00C3:  CLRF   40
00C4:  MOVF   2E,W
00C5:  MOVWF  41
00C6:  CALL   064
00C7:  INCF   2D,F
00C8:  GOTO   0BC
00C9:  BCF    0A.3
00CA:  BCF    0A.4
00CB:  GOTO   546 (RETURN)
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
018C:  DECFSZ 3D,W
018D:  GOTO   18F
018E:  GOTO   192
....................      address=lcd_line_two; 
018F:  MOVLW  40
0190:  MOVWF  3E
0191:  GOTO   193
....................    else 
....................      address=0; 
0192:  CLRF   3E
....................    address+=x-1; 
0193:  MOVLW  01
0194:  SUBWF  3C,W
0195:  ADDWF  3E,F
....................    lcd_send_byte(0,0x80|address); 
0196:  MOVF   3E,W
0197:  IORLW  80
0198:  MOVWF  3F
0199:  CLRF   40
019A:  MOVF   3F,W
019B:  MOVWF  41
019C:  CALL   064
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
0175:  MOVF   3B,W
0176:  XORLW  0C
0177:  BTFSC  03.2
0178:  GOTO   180
0179:  XORLW  06
017A:  BTFSC  03.2
017B:  GOTO   188
017C:  XORLW  02
017D:  BTFSC  03.2
017E:  GOTO   19E
017F:  GOTO   1A3
....................      case '\f'   : lcd_send_byte(0,1); 
0180:  CLRF   40
0181:  MOVLW  01
0182:  MOVWF  41
0183:  CALL   064
....................                    delay_ms(2); 
0184:  MOVLW  02
0185:  MOVWF  3C
0186:  CALL   03F
....................                                            break; 
0187:  GOTO   1A8
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
0188:  MOVLW  01
0189:  MOVWF  3C
018A:  MOVLW  02
018B:  MOVWF  3D
*
019D:  GOTO   1A8
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
019E:  CLRF   40
019F:  MOVLW  10
01A0:  MOVWF  41
01A1:  CALL   064
01A2:  GOTO   1A8
....................      default     : lcd_send_byte(1,c);     break; 
01A3:  MOVLW  01
01A4:  MOVWF  40
01A5:  MOVF   3B,W
01A6:  MOVWF  41
01A7:  CALL   064
....................    } 
01A8:  RETURN
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... // Declaracion de variables 
.................... int   tecla_temp,tecla,i; 
.................... int   const tabla_tecla[17]={0xD7,0xEE,0xDE,0xBE,0xED,0xDD,0xBD,0xEB,0xDB,0xBB,0xE7,0xB7,0x77,0x7B,0x7D,0x7E,0x80}; 
.................... int   const tabla_ascii[16]={'0','1','2','3','4','5','6','7','8','9','*','#','D','C','B','A'}; 
.................... float m,lectura; 
.................... unsigned long n; 
.................... //************************************************* 
....................  
.................... // ************************************************ 
.................... // Declaracion de la funcion 
.................... int teclado(); 
.................... void lect_adc(int canal); 
.................... //************************************************* 
....................  
.................... // ************************************************ 
.................... // Funcion Principal 
.................... void main() 
*
052E:  MOVF   03,W
052F:  ANDLW  1F
0530:  MOVWF  03
0531:  BSF    03.5
0532:  BSF    1F.0
0533:  BSF    1F.1
0534:  BSF    1F.2
0535:  BCF    1F.3
0536:  MOVLW  07
0537:  MOVWF  1C
0538:  BCF    03.7
.................... { 
....................    setup_adc_ports(AN0_AN1_AN3); 
0539:  BCF    1F.0
053A:  BCF    1F.1
053B:  BSF    1F.2
053C:  BCF    1F.3
....................    setup_adc(adc_clock_div_32); 
053D:  BCF    1F.6
053E:  BCF    03.5
053F:  BCF    1F.6
0540:  BSF    1F.7
0541:  BSF    03.5
0542:  BSF    1F.7
0543:  BCF    03.5
0544:  BSF    1F.0
....................    lcd_init(); 
0545:  GOTO   0A0
....................  
....................       while(TRUE) 
....................          { 
....................             m=teclado(); 
0546:  GOTO   0CC
0547:  CLRF   2F
0548:  MOVF   78,W
0549:  MOVWF  2E
054A:  CALL   119
054B:  MOVF   7A,W
054C:  MOVWF  26
054D:  MOVF   79,W
054E:  MOVWF  25
054F:  MOVF   78,W
0550:  MOVWF  24
0551:  MOVF   77,W
0552:  MOVWF  23
....................             if(m!=0) 
0553:  MOVF   26,W
0554:  MOVWF  30
0555:  MOVF   25,W
0556:  MOVWF  2F
0557:  MOVF   24,W
0558:  MOVWF  2E
0559:  MOVF   23,W
055A:  MOVWF  2D
055B:  CLRF   34
055C:  CLRF   33
055D:  CLRF   32
055E:  CLRF   31
055F:  CALL   136
0560:  BTFSC  03.2
0561:  GOTO   59C
....................             { 
....................             lcd_putc("\f"); 
0562:  MOVLW  35
0563:  BSF    03.6
0564:  MOVWF  0D
0565:  MOVLW  00
0566:  MOVWF  0F
0567:  BCF    03.6
0568:  CALL   1A9
....................             if(m==49){ 
0569:  MOVF   26,W
056A:  MOVWF  30
056B:  MOVF   25,W
056C:  MOVWF  2F
056D:  MOVF   24,W
056E:  MOVWF  2E
056F:  MOVF   23,W
0570:  MOVWF  2D
0571:  CLRF   34
0572:  CLRF   33
0573:  MOVLW  44
0574:  MOVWF  32
0575:  MOVLW  84
0576:  MOVWF  31
0577:  CALL   136
0578:  BTFSS  03.2
0579:  GOTO   57D
....................             lect_adc(0);} 
057A:  CLRF   2D
057B:  CALL   404
057C:  GOTO   599
....................             else if(m==50){ 
057D:  MOVF   26,W
057E:  MOVWF  30
057F:  MOVF   25,W
0580:  MOVWF  2F
0581:  MOVF   24,W
0582:  MOVWF  2E
0583:  MOVF   23,W
0584:  MOVWF  2D
0585:  CLRF   34
0586:  CLRF   33
0587:  MOVLW  48
0588:  MOVWF  32
0589:  MOVLW  84
058A:  MOVWF  31
058B:  CALL   136
058C:  BTFSS  03.2
058D:  GOTO   592
....................             lect_adc(1);} 
058E:  MOVLW  01
058F:  MOVWF  2D
0590:  CALL   404
0591:  GOTO   599
....................             else { 
....................             printf(lcd_putc,"Tecla invalida"); 
0592:  MOVLW  36
0593:  BSF    03.6
0594:  MOVWF  0D
0595:  MOVLW  00
0596:  MOVWF  0F
0597:  BCF    03.6
0598:  CALL   1A9
....................             } 
....................             delay_ms(50); 
0599:  MOVLW  32
059A:  MOVWF  3C
059B:  CALL   03F
....................             } 
059C:  GOTO   546
....................           }   
.................... } 
....................  
059D:  SLEEP
....................  
.................... // *********************************************** 
.................... // Definicion de las variables 
....................    int teclado() 
....................    { 
....................        
....................       set_tris_b(0xF0); 
*
00CC:  MOVLW  F0
00CD:  BSF    03.5
00CE:  MOVWF  06
....................       do 
....................       { 
....................          do 
....................          { 
....................             tecla_port=0xF0; 
00CF:  MOVLW  F0
00D0:  BCF    03.5
00D1:  MOVWF  06
....................             rbpu=0; 
00D2:  BSF    03.5
00D3:  BCF    01.7
....................             rbif=0; 
00D4:  BCF    03.5
00D5:  BCF    0B.0
....................             i=1; 
00D6:  MOVLW  01
00D7:  MOVWF  22
....................             while(rbif==0){} 
00D8:  BTFSS  0B.0
00D9:  GOTO   0D8
....................             delay_ms(30); 
00DA:  MOVLW  1E
00DB:  MOVWF  3C
00DC:  CALL   03F
....................             tecla_temp=0xFE; 
00DD:  MOVLW  FE
00DE:  MOVWF  20
....................             do 
....................             { 
....................                tecla_port=tecla_temp; 
00DF:  MOVF   20,W
00E0:  MOVWF  06
....................                tecla=tecla_temp; 
00E1:  MOVF   20,W
00E2:  MOVWF  21
....................                tecla_temp=(tecla_temp<<1)+1; 
00E3:  BCF    03.0
00E4:  RLF    20,W
00E5:  ADDLW  01
00E6:  MOVWF  20
....................                i++; 
00E7:  INCF   22,F
....................             }while((i<=4) && (tecla_port==tecla)); 
00E8:  MOVF   22,W
00E9:  SUBLW  04
00EA:  BTFSS  03.0
00EB:  GOTO   0F0
00EC:  MOVF   21,W
00ED:  SUBWF  06,W
00EE:  BTFSC  03.2
00EF:  GOTO   0DF
....................          }while(tecla_port==tecla); 
00F0:  MOVF   21,W
00F1:  SUBWF  06,W
00F2:  BTFSS  03.2
00F3:  GOTO   0F6
00F4:  BSF    03.5
00F5:  GOTO   0CF
....................          tecla=tecla_port; 
00F6:  MOVF   06,W
00F7:  MOVWF  21
....................          i=0; 
00F8:  CLRF   22
....................          while((tabla_tecla[i]!=tecla) && (i<16)) 
00F9:  MOVF   22,W
00FA:  CALL   00C
00FB:  SUBWF  21,W
00FC:  BTFSC  03.2
00FD:  GOTO   104
00FE:  MOVF   22,W
00FF:  SUBLW  0F
0100:  BTFSS  03.0
0101:  GOTO   104
....................          { 
....................             i++; 
0102:  INCF   22,F
0103:  GOTO   0F9
....................          } 
....................       }while(i==16);       
0104:  MOVF   22,W
0105:  SUBLW  10
0106:  BTFSS  03.2
0107:  GOTO   10A
0108:  BSF    03.5
0109:  GOTO   0CF
....................       tecla=tabla_ascii[i]; 
010A:  MOVF   22,W
010B:  CALL   021
010C:  MOVWF  78
010D:  MOVWF  21
....................       rbif=0; 
010E:  BCF    0B.0
....................       while(rbif==0){} 
010F:  BTFSS  0B.0
0110:  GOTO   10F
....................       delay_ms(30); 
0111:  MOVLW  1E
0112:  MOVWF  3C
0113:  CALL   03F
....................       return(tecla); 
0114:  MOVF   21,W
0115:  MOVWF  78
0116:  BCF    0A.3
0117:  BCF    0A.4
0118:  GOTO   547 (RETURN)
.................... } 
....................  
....................    void lect_adc(int canal){ 
....................    if (canal == 0){ 
*
0404:  MOVF   2D,F
0405:  BTFSS  03.2
0406:  GOTO   40E
....................    set_adc_channel(0);//CONVIERTE CANAL 0 
0407:  MOVLW  00
0408:  MOVWF  78
0409:  MOVF   1F,W
040A:  ANDLW  C7
040B:  IORWF  78,W
040C:  MOVWF  1F
....................    } else if(canal==1){ 
040D:  GOTO   41D
040E:  DECFSZ 2D,W
040F:  GOTO   417
....................    set_adc_channel(1);//CONVIERTE CANAL 0 
0410:  MOVLW  08
0411:  MOVWF  78
0412:  MOVF   1F,W
0413:  ANDLW  C7
0414:  IORWF  78,W
0415:  MOVWF  1F
....................    } else { 
0416:  GOTO   41D
....................    set_adc_channel(0);//CONVIERTE CANAL 0 
0417:  MOVLW  00
0418:  MOVWF  78
0419:  MOVF   1F,W
041A:  ANDLW  C7
041B:  IORWF  78,W
041C:  MOVWF  1F
....................    } 
....................    n=read_adc(); 
041D:  BSF    1F.2
041E:  BTFSC  1F.2
041F:  GOTO   41E
0420:  BSF    03.5
0421:  MOVF   1E,W
0422:  BCF    03.5
0423:  MOVWF  2B
0424:  MOVF   1E,W
0425:  MOVWF  2C
....................    lectura = n*5/1023; 
0426:  MOVF   2C,W
0427:  MOVWF  2F
0428:  MOVF   2B,W
0429:  MOVWF  2E
042A:  CLRF   31
042B:  MOVLW  05
042C:  MOVWF  30
*
0441:  MOVF   79,W
0442:  MOVWF  2F
0443:  MOVF   78,W
0444:  MOVWF  2E
0445:  MOVF   2F,W
0446:  MOVWF  31
0447:  MOVF   2E,W
0448:  MOVWF  30
0449:  MOVLW  03
044A:  MOVWF  33
044B:  MOVLW  FF
044C:  MOVWF  32
*
0471:  MOVF   79,W
0472:  MOVWF  7A
0473:  MOVF   78,W
0474:  MOVWF  2E
0475:  MOVF   79,W
0476:  MOVWF  2F
0477:  CALL   119
0478:  MOVF   7A,W
0479:  MOVWF  2A
047A:  MOVF   79,W
047B:  MOVWF  29
047C:  MOVF   78,W
047D:  MOVWF  28
047E:  MOVF   77,W
047F:  MOVWF  27
....................    delay_ms(150); 
0480:  MOVLW  96
0481:  MOVWF  3C
0482:  CALL   03F
....................    printf(lcd_putc,"ADC%i : %lu",canal,n); 
0483:  MOVLW  41
0484:  MOVWF  3B
0485:  CALL   175
0486:  MOVLW  44
0487:  MOVWF  3B
0488:  CALL   175
0489:  MOVLW  43
048A:  MOVWF  3B
048B:  CALL   175
048C:  MOVF   2D,W
048D:  MOVWF  2E
048E:  MOVLW  18
048F:  MOVWF  2F
0490:  CALL   209
0491:  MOVLW  20
0492:  MOVWF  3B
0493:  CALL   175
0494:  MOVLW  3A
0495:  MOVWF  3B
0496:  CALL   175
0497:  MOVLW  20
0498:  MOVWF  3B
0499:  CALL   175
049A:  MOVLW  10
049B:  MOVWF  04
049C:  MOVF   2C,W
049D:  MOVWF  2F
049E:  MOVF   2B,W
049F:  MOVWF  2E
....................    lcd_putc("\n"); 
*
0502:  MOVLW  3E
0503:  BSF    03.6
0504:  MOVWF  0D
0505:  MOVLW  00
0506:  MOVWF  0F
0507:  BCF    03.6
0508:  CALL   1A9
....................    printf(lcd_putc,"ADC%i : %f",canal,lectura); 
0509:  MOVLW  41
050A:  MOVWF  3B
050B:  CALL   175
050C:  MOVLW  44
050D:  MOVWF  3B
050E:  CALL   175
050F:  MOVLW  43
0510:  MOVWF  3B
0511:  CALL   175
0512:  MOVF   2D,W
0513:  MOVWF  2E
0514:  MOVLW  18
0515:  MOVWF  2F
0516:  CALL   209
0517:  MOVLW  20
0518:  MOVWF  3B
0519:  CALL   175
051A:  MOVLW  3A
051B:  MOVWF  3B
051C:  CALL   175
051D:  MOVLW  20
051E:  MOVWF  3B
051F:  CALL   175
0520:  MOVLW  89
0521:  MOVWF  04
0522:  MOVF   2A,W
0523:  MOVWF  31
0524:  MOVF   29,W
0525:  MOVWF  30
0526:  MOVF   28,W
0527:  MOVWF  2F
0528:  MOVF   27,W
0529:  MOVWF  2E
052A:  MOVLW  02
052B:  MOVWF  32
052C:  GOTO   2AF
052D:  RETURN
.................... } 
....................  
.................... //********************************************* 

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

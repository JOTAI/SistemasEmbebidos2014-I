#include <16f877a.h>
#FUSES HS,NOWDT,NOPROTECT,NOLVP  
#USE delay(crystal=10000000)       // Definiendo cristal de 10MHz
#USE FAST_IO(B)   //Puerto B
#INCLUDE "LCD.C"

//#BYTE OPTION_REG = 0x81             // Declaracion OPTION_REG
#BIT   RBIF=0x0B.0                     // Bandera de la interrupcion RB
#BIT   RBPU=0x81.7                     // Bit habilitacion del PullUp del PORTB

// **************************************
// Creacion de Variables

int   tecla_temp,tecla,i;
int   const tabla_tecla[17]={0xD7,0xEE,0xDE,0xBE,0xED,0xDD,0xBD,0xEB,0xDB,0xBB,0xE7,0xB7,0x77,0x7B,0x7D,0x7E,0x80};
int   const tabla_ascii[16]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};

//***************************************



// **************************************
// Declaracion de Funciones
void Cargar_configuracion();
void Configurar_interrupciones();
void Iniciar_teclado();
void DAR_COL();
void VER_ROW();
void Escribir_KEY();

//***************************************


// **************************************
// Declaracion de las Interrupciones
#INT_RB
void  RB_isr(void) {
   VER_ROW();
}
#int_TIMER0
void TIMER0_isr(void) {
   set_timer0 (0x1B);      // Se recarga el TMR0  
   DAR_COL();
   }


//***************************************


// **************************************
// FUNCION PRINCIPAL
void main()
{
   lcd_init();
   Cargar_configuracion();
   Configurar_interrupciones();
   while(TRUE)
   {
      Escribir_KEY();
      delay_ms(50);
   }

}
//***************************************


// ****************************************
// Definicion de las Funciones

void Cargar_configuracion(){
   //SET_TRIS_B(0xFF);    //configura PORTB entrada / 0=salida / 1=entrada
   //SET_TRIS_D(0x00);    //configura PORTD salida
   }

void Configurar_interrupciones(){
   setup_timer_0(RTCC_INTERNAL|RTCC_DIV_2);   //Configuración timer0
   set_timer0 (0x1B);                    //Carga del timer0
   enable_interrupts(INT_TIMER0);       //Habilita interrupción timer0

   enable_interrupts(INT_RB);       // Habilitando interrupcion RB /RB4-RB7
   //bit_clear(OPTION_REG,7);         // Habilita el Pull-UP de RB->OPTION_REG,RBPU
   RBPU=0;
   enable_interrupts(GLOBAL);       // Habilita las interrupciones
}

void Iniciar_teclado(){
   printf("Espera...");
   delay_ms(500);
   lcd_putc('\f');
   printf(lcd_putc,"Puede escribir");
   delay_ms(1000);
   lcd_putc('\f');
   lcd_gotoxy(1,1);
   
}

void DAR_COL(){
   output_high(PIN_B0);
   COL=0;
   delay_ms(1);
   output_high(PIN_B1);
   COL=1;
   delay_ms(1);
   output_high(PIN_B2);
   COL=2;
   delay_ms(1);
   output_high(PIN_B3);
   COL=3;
   delay_ms(1);
}

void VER_ROW(){
   if (input(PIN_B4) == 1 ){ ROW=0; }
   if (input(PIN_B5) == 1 ){ ROW=1; }
   if (input(PIN_B6) == 1 ){ ROW=2; }
   if (input(PIN_B7) == 1 ){ ROW=3; }
}

void Escribir_KEY(){
   if (tecla == 1){
      printf(lcd_putc," %c ", KEYS[COL][ROW]);
      tecla=0;
   }
}

//*****************************************



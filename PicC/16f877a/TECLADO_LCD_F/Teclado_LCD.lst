CCS PCM C Compiler, Version 5.008, 5967               17-jun-14 10:47

               Filename:   D:\IGNACIO\Programacion\Microcontroladores\PicC\16f877a\TECLADO_LCD_PR2\Teclado_LCD.lst

               ROM used:   451 words (6%)
                           Largest free fragment is 2048
               RAM used:   10 (3%) at main() level
                           24 (7%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   190
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  BCF    0A.0
000D:  BCF    0A.1
000E:  BCF    0A.2
000F:  ADDWF  02,F
0010:  RETLW  D7
0011:  RETLW  EE
0012:  RETLW  DE
0013:  RETLW  BE
0014:  RETLW  ED
0015:  RETLW  DD
0016:  RETLW  BD
0017:  RETLW  EB
0018:  RETLW  DB
0019:  RETLW  BB
001A:  RETLW  E7
001B:  RETLW  B7
001C:  RETLW  77
001D:  RETLW  7B
001E:  RETLW  7D
001F:  RETLW  7E
0020:  RETLW  80
0021:  BCF    0A.0
0022:  BCF    0A.1
0023:  BCF    0A.2
0024:  ADDWF  02,F
0025:  RETLW  30
0026:  RETLW  31
0027:  RETLW  32
0028:  RETLW  33
0029:  RETLW  34
002A:  RETLW  35
002B:  RETLW  36
002C:  RETLW  37
002D:  RETLW  38
002E:  RETLW  39
002F:  RETLW  41
0030:  RETLW  42
0031:  RETLW  43
0032:  RETLW  44
0033:  RETLW  45
0034:  RETLW  46
0035:  DATA 0A,00
0036:  DATA 0C,00
*
0145:  MOVF   0B,W
0146:  MOVWF  25
0147:  BCF    0B.7
0148:  BSF    03.5
0149:  BSF    03.6
014A:  BSF    0C.7
014B:  BSF    0C.0
014C:  NOP
014D:  NOP
014E:  BCF    03.5
014F:  MOVF   0C,W
0150:  ANDLW  7F
0151:  BTFSC  03.2
0152:  GOTO   18C
0153:  BCF    03.6
0154:  MOVWF  26
0155:  BSF    03.6
0156:  MOVF   0D,W
0157:  BCF    03.6
0158:  MOVWF  27
0159:  BSF    03.6
015A:  MOVF   0F,W
015B:  BCF    03.6
015C:  MOVWF  28
015D:  MOVF   26,W
015E:  MOVWF  29
015F:  CALL   111
0160:  MOVF   27,W
0161:  BSF    03.6
0162:  MOVWF  0D
0163:  BCF    03.6
0164:  MOVF   28,W
0165:  BSF    03.6
0166:  MOVWF  0F
0167:  BSF    03.5
0168:  BSF    0C.7
0169:  BSF    0C.0
016A:  NOP
016B:  NOP
016C:  BCF    03.5
016D:  RLF    0C,W
016E:  RLF    0E,W
016F:  ANDLW  7F
0170:  BTFSC  03.2
0171:  GOTO   18C
0172:  BCF    03.6
0173:  MOVWF  26
0174:  BSF    03.6
0175:  MOVF   0D,W
0176:  BCF    03.6
0177:  MOVWF  27
0178:  BSF    03.6
0179:  MOVF   0F,W
017A:  BCF    03.6
017B:  MOVWF  28
017C:  MOVF   26,W
017D:  MOVWF  29
017E:  CALL   111
017F:  MOVF   27,W
0180:  BSF    03.6
0181:  MOVWF  0D
0182:  BCF    03.6
0183:  MOVF   28,W
0184:  BSF    03.6
0185:  MOVWF  0F
0186:  INCF   0D,F
0187:  BTFSC  03.2
0188:  INCF   0F,F
0189:  BCF    03.6
018A:  GOTO   148
018B:  BSF    03.6
018C:  BCF    03.6
018D:  BTFSC  25.7
018E:  BSF    0B.7
018F:  RETURN
....................  
.................... #list 
....................  
.................... #FUSES HS,NOWDT,NOPROTECT,NOLVP  
.................... #USE delay(clock=20000000) 
*
0037:  MOVLW  2A
0038:  MOVWF  04
0039:  BCF    03.7
003A:  MOVF   00,W
003B:  BTFSC  03.2
003C:  GOTO   04A
003D:  MOVLW  06
003E:  MOVWF  78
003F:  CLRF   77
0040:  DECFSZ 77,F
0041:  GOTO   040
0042:  DECFSZ 78,F
0043:  GOTO   03F
0044:  MOVLW  7B
0045:  MOVWF  77
0046:  DECFSZ 77,F
0047:  GOTO   046
0048:  DECFSZ 00,F
0049:  GOTO   03D
004A:  RETURN
....................  
.................... #BYTE   tecla_port=0x06 
.................... #BIT   rbif=0x0B.0 
.................... #BIT   rbpu=0x81.7 
.................... #INCLUDE "LCD.C" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
005D:  MOVLW  F0
005E:  BSF    03.5
005F:  MOVWF  08
....................       lcd.rw = 1; 
0060:  BCF    03.5
0061:  BSF    08.2
....................       delay_cycles(1); 
0062:  NOP
....................       lcd.enable = 1; 
0063:  BSF    08.0
....................       delay_cycles(1); 
0064:  NOP
....................       high = lcd.data; 
0065:  MOVF   08,W
0066:  SWAPF  08,W
0067:  ANDLW  0F
0068:  MOVWF  31
....................       lcd.enable = 0; 
0069:  BCF    08.0
....................       delay_cycles(1); 
006A:  NOP
....................       lcd.enable = 1; 
006B:  BSF    08.0
....................       delay_us(1); 
006C:  GOTO   06D
006D:  GOTO   06E
006E:  NOP
....................       low = lcd.data; 
006F:  MOVF   08,W
0070:  SWAPF  08,W
0071:  ANDLW  0F
0072:  MOVWF  30
....................       lcd.enable = 0; 
0073:  BCF    08.0
....................       set_tris_lcd(LCD_WRITE); 
0074:  MOVLW  00
0075:  BSF    03.5
0076:  MOVWF  08
....................       return( (high<<4) | low); 
0077:  BCF    03.5
0078:  SWAPF  31,W
0079:  MOVWF  77
007A:  MOVLW  F0
007B:  ANDWF  77,F
007C:  MOVF   77,W
007D:  IORWF  30,W
007E:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
004B:  SWAPF  31,W
004C:  ANDLW  F0
004D:  MOVWF  77
004E:  MOVLW  0F
004F:  ANDWF  08,W
0050:  IORWF  77,W
0051:  MOVWF  08
....................       delay_cycles(1); 
0052:  NOP
....................       lcd.enable = 1; 
0053:  BSF    08.0
....................       delay_us(2); 
0054:  MOVLW  02
0055:  MOVWF  77
0056:  DECFSZ 77,F
0057:  GOTO   056
0058:  GOTO   059
0059:  NOP
....................       lcd.enable = 0; 
005A:  BCF    08.0
005B:  RETURN
.................... } 
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
005C:  BCF    08.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
007F:  MOVF   78,W
0080:  MOVWF  30
0081:  BTFSC  30.7
0082:  GOTO   05D
....................       lcd.rs = address; 
0083:  BTFSS  2E.0
0084:  BCF    08.1
0085:  BTFSC  2E.0
0086:  BSF    08.1
....................       delay_cycles(1); 
0087:  NOP
....................       lcd.rw = 0; 
0088:  BCF    08.2
....................       delay_cycles(1); 
0089:  NOP
....................       lcd.enable = 0; 
008A:  BCF    08.0
....................       lcd_send_nibble(n >> 4); 
008B:  SWAPF  2F,W
008C:  MOVWF  30
008D:  MOVLW  0F
008E:  ANDWF  30,F
008F:  MOVF   30,W
0090:  MOVWF  31
0091:  CALL   04B
....................       lcd_send_nibble(n & 0xf); 
0092:  MOVF   2F,W
0093:  ANDLW  0F
0094:  MOVWF  30
0095:  MOVWF  31
0096:  CALL   04B
0097:  RETURN
.................... } 
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
0098:  MOVLW  00
0099:  BSF    03.5
009A:  MOVWF  08
....................     lcd.rs = 0; 
009B:  BCF    03.5
009C:  BCF    08.1
....................     lcd.rw = 0; 
009D:  BCF    08.2
....................     lcd.enable = 0; 
009E:  BCF    08.0
....................     delay_ms(15); 
009F:  MOVLW  0F
00A0:  MOVWF  2A
00A1:  CALL   037
....................     for(i=1;i<=3;++i) { 
00A2:  MOVLW  01
00A3:  MOVWF  25
00A4:  MOVF   25,W
00A5:  SUBLW  03
00A6:  BTFSS  03.0
00A7:  GOTO   0B0
....................        lcd_send_nibble(3); 
00A8:  MOVLW  03
00A9:  MOVWF  31
00AA:  CALL   04B
....................        delay_ms(5); 
00AB:  MOVLW  05
00AC:  MOVWF  2A
00AD:  CALL   037
00AE:  INCF   25,F
00AF:  GOTO   0A4
....................     } 
....................     lcd_send_nibble(2); 
00B0:  MOVLW  02
00B1:  MOVWF  31
00B2:  CALL   04B
....................     for(i=0;i<=3;++i) 
00B3:  CLRF   25
00B4:  MOVF   25,W
00B5:  SUBLW  03
00B6:  BTFSS  03.0
00B7:  GOTO   0C1
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
00B8:  MOVF   25,W
00B9:  CALL   004
00BA:  MOVWF  26
00BB:  CLRF   2E
00BC:  MOVF   26,W
00BD:  MOVWF  2F
00BE:  CALL   05C
00BF:  INCF   25,F
00C0:  GOTO   0B4
00C1:  BCF    0A.3
00C2:  BCF    0A.4
00C3:  GOTO   19D (RETURN)
.................... } 
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
0128:  DECFSZ 2B,W
0129:  GOTO   12B
012A:  GOTO   12E
....................      address=lcd_line_two; 
012B:  MOVLW  40
012C:  MOVWF  2C
012D:  GOTO   12F
....................    else 
....................      address=0; 
012E:  CLRF   2C
....................    address+=x-1; 
012F:  MOVLW  01
0130:  SUBWF  2A,W
0131:  ADDWF  2C,F
....................    lcd_send_byte(0,0x80|address); 
0132:  MOVF   2C,W
0133:  IORLW  80
0134:  MOVWF  2D
0135:  CLRF   2E
0136:  MOVF   2D,W
0137:  MOVWF  2F
0138:  CALL   05C
.................... } 
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
0111:  MOVF   29,W
0112:  XORLW  0C
0113:  BTFSC  03.2
0114:  GOTO   11C
0115:  XORLW  06
0116:  BTFSC  03.2
0117:  GOTO   124
0118:  XORLW  02
0119:  BTFSC  03.2
011A:  GOTO   13A
011B:  GOTO   13F
....................      case '\f'   : lcd_send_byte(0,1); 
011C:  CLRF   2E
011D:  MOVLW  01
011E:  MOVWF  2F
011F:  CALL   05C
....................                    delay_ms(2); 
0120:  MOVLW  02
0121:  MOVWF  2A
0122:  CALL   037
....................                                            break; 
0123:  GOTO   144
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
0124:  MOVLW  01
0125:  MOVWF  2A
0126:  MOVLW  02
0127:  MOVWF  2B
*
0139:  GOTO   144
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
013A:  CLRF   2E
013B:  MOVLW  10
013C:  MOVWF  2F
013D:  CALL   05C
013E:  GOTO   144
....................      default     : lcd_send_byte(1,c);     break; 
013F:  MOVLW  01
0140:  MOVWF  2E
0141:  MOVF   29,W
0142:  MOVWF  2F
0143:  CALL   05C
....................    } 
0144:  RETURN
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... // Declaracion de variables 
.................... int   tecla_temp,tecla,i; 
.................... int   const tabla_tecla[17]={0xD7,0xEE,0xDE,0xBE,0xED,0xDD,0xBD,0xEB,0xDB,0xBB,0xE7,0xB7,0x77,0x7B,0x7D,0x7E,0x80}; 
.................... int   const tabla_ascii[16]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}; 
.................... //************************************************* 
....................  
.................... // Declaracion de la funcion 
.................... int teclado(); 
....................  
....................  
.................... void main() 
*
0190:  MOVF   03,W
0191:  ANDLW  1F
0192:  MOVWF  03
0193:  BSF    03.5
0194:  BSF    1F.0
0195:  BSF    1F.1
0196:  BSF    1F.2
0197:  BCF    1F.3
0198:  MOVLW  07
0199:  MOVWF  1C
019A:  BCF    03.7
.................... { 
....................    int m,n;    
....................    lcd_init(); 
019B:  BCF    03.5
019C:  GOTO   098
....................       while(1) 
....................          { 
....................             m=teclado(); 
019D:  GOTO   0C4
019E:  MOVF   78,W
019F:  MOVWF  23
....................             if(m!=0) 
01A0:  MOVF   23,F
01A1:  BTFSC  03.2
01A2:  GOTO   1C1
....................             { 
....................              lcd_putc(m); 
01A3:  MOVF   23,W
01A4:  MOVWF  29
01A5:  CALL   111
....................              delay_ms(50); 
01A6:  MOVLW  32
01A7:  MOVWF  2A
01A8:  CALL   037
....................              n++; 
01A9:  INCF   24,F
....................              if(n==16) 
01AA:  MOVF   24,W
01AB:  SUBLW  10
01AC:  BTFSS  03.2
01AD:  GOTO   1B5
....................              { 
....................                lcd_putc("\n"); 
01AE:  MOVLW  35
01AF:  BSF    03.6
01B0:  MOVWF  0D
01B1:  MOVLW  00
01B2:  MOVWF  0F
01B3:  BCF    03.6
01B4:  CALL   145
....................              } 
....................              if(n==32) 
01B5:  MOVF   24,W
01B6:  SUBLW  20
01B7:  BTFSS  03.2
01B8:  GOTO   1C1
....................              { 
....................                lcd_putc("\f"); 
01B9:  MOVLW  36
01BA:  BSF    03.6
01BB:  MOVWF  0D
01BC:  MOVLW  00
01BD:  MOVWF  0F
01BE:  BCF    03.6
01BF:  CALL   145
....................                n=0; 
01C0:  CLRF   24
....................              } 
....................           }   
01C1:  GOTO   19D
....................          } 
.................... } 
....................  
01C2:  SLEEP
....................  
....................  
....................    int teclado() 
....................    { 
....................        
....................       set_tris_b(0xF0); 
*
00C4:  MOVLW  F0
00C5:  BSF    03.5
00C6:  MOVWF  06
....................       do 
....................       { 
....................          do 
....................          { 
....................             tecla_port=0xF0; 
00C7:  MOVLW  F0
00C8:  BCF    03.5
00C9:  MOVWF  06
....................             rbpu=0; 
00CA:  BSF    03.5
00CB:  BCF    01.7
....................             rbif=0; 
00CC:  BCF    03.5
00CD:  BCF    0B.0
....................             i=1; 
00CE:  MOVLW  01
00CF:  MOVWF  22
....................             while(rbif==0){} 
00D0:  BTFSS  0B.0
00D1:  GOTO   0D0
....................             delay_ms(30); 
00D2:  MOVLW  1E
00D3:  MOVWF  2A
00D4:  CALL   037
....................             tecla_temp=0xFE; 
00D5:  MOVLW  FE
00D6:  MOVWF  20
....................             do 
....................             { 
....................                tecla_port=tecla_temp; 
00D7:  MOVF   20,W
00D8:  MOVWF  06
....................                tecla=tecla_temp; 
00D9:  MOVF   20,W
00DA:  MOVWF  21
....................                tecla_temp=(tecla_temp<<1)+1; 
00DB:  BCF    03.0
00DC:  RLF    20,W
00DD:  ADDLW  01
00DE:  MOVWF  20
....................                i++; 
00DF:  INCF   22,F
....................             }while((i<=4) && (tecla_port==tecla)); 
00E0:  MOVF   22,W
00E1:  SUBLW  04
00E2:  BTFSS  03.0
00E3:  GOTO   0E8
00E4:  MOVF   21,W
00E5:  SUBWF  06,W
00E6:  BTFSC  03.2
00E7:  GOTO   0D7
....................          }while(tecla_port==tecla); 
00E8:  MOVF   21,W
00E9:  SUBWF  06,W
00EA:  BTFSS  03.2
00EB:  GOTO   0EE
00EC:  BSF    03.5
00ED:  GOTO   0C7
....................          tecla=tecla_port; 
00EE:  MOVF   06,W
00EF:  MOVWF  21
....................          i=0; 
00F0:  CLRF   22
....................          while((tabla_tecla[i]!=tecla) && (i<16)) 
00F1:  MOVF   22,W
00F2:  CALL   00C
00F3:  SUBWF  21,W
00F4:  BTFSC  03.2
00F5:  GOTO   0FC
00F6:  MOVF   22,W
00F7:  SUBLW  0F
00F8:  BTFSS  03.0
00F9:  GOTO   0FC
....................          { 
....................             i++; 
00FA:  INCF   22,F
00FB:  GOTO   0F1
....................          } 
....................       }while(i==16);       
00FC:  MOVF   22,W
00FD:  SUBLW  10
00FE:  BTFSS  03.2
00FF:  GOTO   102
0100:  BSF    03.5
0101:  GOTO   0C7
....................       tecla=tabla_ascii[i]; 
0102:  MOVF   22,W
0103:  CALL   021
0104:  MOVWF  78
0105:  MOVWF  21
....................       rbif=0; 
0106:  BCF    0B.0
....................       while(rbif==0){} 
0107:  BTFSS  0B.0
0108:  GOTO   107
....................       delay_ms(30); 
0109:  MOVLW  1E
010A:  MOVWF  2A
010B:  CALL   037
....................       return(tecla); 
010C:  MOVF   21,W
010D:  MOVWF  78
010E:  BCF    0A.3
010F:  BCF    0A.4
0110:  GOTO   19E (RETURN)
.................... } 

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT

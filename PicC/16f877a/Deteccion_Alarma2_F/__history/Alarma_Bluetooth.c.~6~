#include <16F877A.h>
#device adc=16

#FUSES NOWDT                    //No Watch Dog Timer
#FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD)
#FUSES NOPUT                    //No Power Up Timer
#FUSES NOBROWNOUT               //No brownout reset
#FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O
#FUSES NOCPD                    //No EE protection
#FUSES NOWRT                    //Program memory not write protected
#FUSES NODEBUG                  //No Debug mode for ICD
#FUSES NOPROTECT                //Code not protected from reading

#use delay(clock=10000000)
#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=BLUE,errors)

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h> 

#USE FAST_IO(A) 
#USE FAST_IO(D)

// **************************************
// Declaracion de variables

char entrada[5]="\0";
int1 letra_in;
int1 estado_alarma = 0;
unsigned int cont_tiempo = 0;
//***************************************

// **************************************
// Declaracion de Funciones
void Cargar_configuracion();
void Configurar_interrupciones();

// **************************************

// **************************************
// Declaracion de las Interrupciones
#INT_EXT       //Sentencias de la interrupcion RB0
void ext_isr(){
      if(estado_alarma == 0){
      estado_alarma = 1;
      enable_interrupts(INT_TIMER0);       //Habilita interrupción timer0
      }
      else {
      estado_alarma = 0;
      disable_interrupts(INT_TIMER0);       //Habilita interrupción timer0
      output_low(PIN_D0);
      }
   }
#INT_RB
void rb_isr(){
   if(input_)
}

#int_TIMER0
void TIMER0_isr(void) {
   set_timer0 (0x1B);
   cont_tiempo++;
   if (cont_tiempo == 255){
   output_toggle(PIN_D0);
   cont_tiempo = 0;
   }
   }               //Se recarga el timer0
// **************************************************



void main() {  
   
   while(true){     //Ciclo infinito en espera de interrupciones 

               Delay_ms(10);
              }                                
   }//FIN D

// ****************************************
// Definicion de las Funciones

void Cargar_configuracion(){
   SET_TRIS_B(0xFF);    //configura PORTB entrada / 0=salida / 1=entrada
   SET_TRIS_D(0x00);    //configura PORTD salida
   OUTPUT_D(0x00);   //inicializando PORTD en 0x00

   estado_alarma = 0;
}

void Configurar_interrupciones(){ 
   setup_timer_0(RTCC_INTERNAL|RTCC_DIV_2);   //Configuración timer0
   set_timer0 (0x1B);                    //Carga del timer0
   ext_int_edge(L_TO_H);         // Flag INTF si flanco de bajada / H_TO_L bajada
   enable_interrupts(INT_EXT);   // habilitar interrupcion del RB0 /INTE
   enable_interrupts(INT_RB);   // habilitar interrupcion del RB
   enable_interrupts(GLOBAL);
}
//**********************************************************************



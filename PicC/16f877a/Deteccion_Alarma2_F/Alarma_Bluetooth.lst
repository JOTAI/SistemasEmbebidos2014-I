CCS PCM C Compiler, Version 5.008, 5967               03-jul-14 03:02

               Filename:   D:\IGNACIO\ProgramacionGitHub\SistemasEmbebidos2014-I\PicC\16f877a\Deteccion_Alarma2_F\Alarma_Bluetooth.lst

               ROM used:   174 words (2%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           17 (5%) worst case
               Stack used: 2 locations (1 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   098
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.3
0018:  GOTO   01B
0019:  BTFSC  0B.0
001A:  GOTO   034
001B:  BTFSS  0B.4
001C:  GOTO   01F
001D:  BTFSC  0B.1
001E:  GOTO   037
001F:  BTFSS  0B.5
0020:  GOTO   023
0021:  BTFSC  0B.2
0022:  GOTO   03A
0023:  MOVF   22,W
0024:  MOVWF  04
0025:  MOVF   23,W
0026:  MOVWF  77
0027:  MOVF   24,W
0028:  MOVWF  78
0029:  MOVF   25,W
002A:  MOVWF  79
002B:  MOVF   26,W
002C:  MOVWF  7A
002D:  MOVF   20,W
002E:  MOVWF  0A
002F:  SWAPF  21,W
0030:  MOVWF  03
0031:  SWAPF  7F,F
0032:  SWAPF  7F,W
0033:  RETFIE
0034:  BCF    0A.3
0035:  BCF    0A.4
0036:  GOTO   043
0037:  BCF    0A.3
0038:  BCF    0A.4
0039:  GOTO   03D
003A:  BCF    0A.3
003B:  BCF    0A.4
003C:  GOTO   052
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
....................  
.................... #FUSES HS,NOWDT,NOPROTECT,NOLVP  
.................... #USE delay(clock=10000000) 
*
0081:  MOVLW  2A
0082:  MOVWF  04
0083:  BCF    03.7
0084:  MOVF   00,W
0085:  BTFSC  03.2
0086:  GOTO   095
0087:  MOVLW  03
0088:  MOVWF  78
0089:  CLRF   77
008A:  DECFSZ 77,F
008B:  GOTO   08A
008C:  DECFSZ 78,F
008D:  GOTO   089
008E:  MOVLW  3C
008F:  MOVWF  77
0090:  DECFSZ 77,F
0091:  GOTO   090
0092:  GOTO   093
0093:  DECFSZ 00,F
0094:  GOTO   087
0095:  BCF    0A.3
0096:  BCF    0A.4
0097:  GOTO   0AC (RETURN)
....................  
.................... #USE FAST_IO(B)   //Puerto B 
.................... #USE FAST_IO(D)   //Puerto D 
....................  
.................... // ************************************** 
.................... // Declaracion de variables 
.................... int1 estado_alarma = 0; 
.................... unsigned int16 cont_tiempo = 0; 
.................... //*************************************** 
....................  
.................... // ************************************** 
.................... // Declaracion de Funciones 
.................... void Cargar_configuracion(); 
.................... void Configurar_interrupciones(); 
....................  
.................... // ************************************** 
....................  
.................... // ************************************** 
.................... // Declaracion de las Interrupciones 
.................... #INT_EXT       //Sentencias de la interrupcion RB0 
.................... void ext_isr(){ 
....................       if(estado_alarma == 1){ 
*
003D:  BTFSC  27.0
....................          enable_interrupts(INT_TIMER0);       //Habilita interrupción timer0 
003E:  BSF    0B.5
....................       } 
....................    } 
003F:  BCF    0B.1
0040:  BCF    0A.3
0041:  BCF    0A.4
0042:  GOTO   023
.................... #INT_RB 
.................... void rb_isr(){ 
....................    if (input(PIN_B4) == 1){ 
0043:  BTFSS  06.4
0044:  GOTO   04E
....................       if(estado_alarma == 0){ 
0045:  BTFSC  27.0
0046:  GOTO   04A
....................       estado_alarma = 1; 
0047:  BSF    27.0
....................       output_high(PIN_D1); 
0048:  BSF    08.1
....................       } 
0049:  GOTO   04E
....................       else { 
....................       estado_alarma = 0; 
004A:  BCF    27.0
....................       disable_interrupts(INT_TIMER0);       //Desabilita interrupción timer0 
004B:  BCF    0B.5
....................       output_low(PIN_D0); 
004C:  BCF    08.0
....................       output_low(PIN_D1); 
004D:  BCF    08.1
....................       } 
....................    } 
....................     
.................... } 
....................  
004E:  BCF    0B.0
004F:  BCF    0A.3
0050:  BCF    0A.4
0051:  GOTO   023
.................... #int_TIMER0 
.................... void TIMER0_isr(void) { 
....................    set_timer0 (0x00); 
0052:  CLRF   01
....................    cont_tiempo++; 
0053:  INCF   28,F
0054:  BTFSC  03.2
0055:  INCF   29,F
....................    if (cont_tiempo == 2023){ 
0056:  MOVF   28,W
0057:  SUBLW  E7
0058:  BTFSS  03.2
0059:  GOTO   062
005A:  MOVF   29,W
005B:  SUBLW  07
005C:  BTFSS  03.2
005D:  GOTO   062
....................    output_toggle(PIN_D0); 
005E:  MOVLW  01
005F:  XORWF  08,F
....................    cont_tiempo = 0; 
0060:  CLRF   29
0061:  CLRF   28
....................    } 
0062:  BCF    0B.2
0063:  BCF    0A.3
0064:  BCF    0A.4
0065:  GOTO   023
.................... }               //Se recarga el timer0 
.................... // ************************************************** 
.................... void main() { 
*
0098:  MOVF   03,W
0099:  ANDLW  1F
009A:  MOVWF  03
009B:  BCF    27.0
009C:  CLRF   29
009D:  CLRF   28
009E:  BSF    03.5
009F:  BSF    1F.0
00A0:  BSF    1F.1
00A1:  BSF    1F.2
00A2:  BCF    1F.3
00A3:  MOVLW  07
00A4:  MOVWF  1C
00A5:  BCF    03.7
....................    Cargar_configuracion(); 
00A6:  BCF    03.5
00A7:  GOTO   066
....................    Configurar_interrupciones(); 
00A8:  GOTO   071
....................    while(true){     //Ciclo infinito en espera de interrupciones  
....................  
....................                Delay_ms(10); 
00A9:  MOVLW  0A
00AA:  MOVWF  2A
00AB:  GOTO   081
00AC:  GOTO   0A9
....................               }                                 
....................    }//FIN D 
....................  
00AD:  SLEEP
.................... // **************************************** 
.................... // Definicion de las Funciones 
....................  
.................... void Cargar_configuracion(){ 
....................    SET_TRIS_B(0xFF);    //configura PORTB entrada / 0=salida / 1=entrada 
*
0066:  MOVLW  FF
0067:  BSF    03.5
0068:  MOVWF  06
....................    SET_TRIS_D(0x00);    //configura PORTD salida 
0069:  MOVLW  00
006A:  MOVWF  08
....................    OUTPUT_D(0x00);   //inicializando PORTD en 0x00 
006B:  BCF    03.5
006C:  CLRF   08
....................    estado_alarma = 0; 
006D:  BCF    27.0
006E:  BCF    0A.3
006F:  BCF    0A.4
0070:  GOTO   0A8 (RETURN)
.................... } 
....................  
.................... void Configurar_interrupciones(){ 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_2);   //Configuración timer0 
0071:  BSF    03.5
0072:  MOVF   01,W
0073:  ANDLW  C0
0074:  MOVWF  01
....................    set_timer0 (0x00);                 //Carga del timer0 
0075:  BCF    03.5
0076:  CLRF   01
....................    ext_int_edge(L_TO_H);         // Flag INTF si flanco de bajada / H_TO_L bajada 
0077:  BSF    03.5
0078:  BSF    01.6
....................    enable_interrupts(INT_EXT);   // habilitar interrupcion del RB0 /INTE 
0079:  BCF    03.5
007A:  BSF    0B.4
....................    enable_interrupts(INT_RB);   // habilitar interrupcion del RB 
007B:  BSF    0B.3
....................    enable_interrupts(GLOBAL); 
007C:  MOVLW  C0
007D:  IORWF  0B,F
007E:  BCF    0A.3
007F:  BCF    0A.4
0080:  GOTO   0A9 (RETURN)
.................... } 
.................... //********************************************************************** 
....................  
....................  

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
